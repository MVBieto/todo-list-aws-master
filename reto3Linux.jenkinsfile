pipeline {
    agent none
    environment {
        AWS_REGION = "us-east-1"
        STACK_NAME = "todo-list-aws"
        STAGE = "production"
        S3_BUCKET = "casopractico14"
    }
    stages {
        agent any
        stage('GetCode') {
            steps {
                git branch: 'master', url: 'https://github.com/MVBieto/todo-list-aws-master.git'
                stash name: 'source-code', includes: '**'
            }
        }
        stage('Pruebas estaticas') {
            parallel {
                stage('Static') {
                    agent { label 'node-1' }
                    steps {
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                flake8 --exit-zero --format=pylint src >flake8.out
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: []
                        }
                    }
                }
                stage('Security') {
                    agent { label 'node-1'}
                    steps {
                        unstash 'source-code'
                        sh '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: []
                        }
                    }
                }
            }
        }
        
        stage('Build Application') {
            agent any
            steps {
                script {
                    sh '''
                    ls
                    sam build
                    '''
                }
            }
        }
        stage('Deploy to AWS') {
            agent any
            steps {
                script {
                    catchError(buildResult: 'SUCCESS') {
                            sh '''
                                sam deploy --stack-name $STACK_NAME \
                                    --region $AWS_REGION \
                                    --s3-bucket $S3_BUCKET \
                                    --parameter-overrides Stage=$STAGE \
                                    --capabilities CAPABILITY_IAM \
                                    --no-confirm-changeset
                            '''
                    }
                }
            }
        }
        stage('Smoke Test') {
            agent { label 'node-1' }
            steps {
                script {
                    def response = sh(script: 'curl -X GET https://h1898ka2e9.execute-api.us-east-1.amazonaws.com/Prod/todos', returnStdout: true).trim()
                    echo "Response: ${response}"
                    sh '''
                        ls
                        set PYTHONPATH=%WORKSPACE%
                        pytest --junitxml=result-rest.xml test/integration/smoke_api_test.py
                    '''              
                    junit 'result*.xml'
                }
            }
        }
    }
}
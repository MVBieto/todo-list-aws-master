pipeline {
    agent any
    environment {
        AWS_REGION = "us-east-1"
        STACK_NAME = "todo-list-aws"
        STAGE = "staging"
        S3_BUCKET = "casopractico14"
    }
    stages {
        stage('GetCode') {
            steps {
                git branch: 'develop', url: 'https://github.com/MVBieto/todo-list-aws-master.git'
                stash name: 'source-code', includes: '**'
            }
        }
        stage('Pruebas estaticas') {
            parallel {
                stage('Static') {
                    steps {
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                flake8 --exit-zero --format=pylint src >flake8.out
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: []
                        }
                    }
                }
                stage('Security') {
                    steps {
                        unstash 'source-code'
                        sh '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: []
                        }
                    }
                }
            }
        }
        stage('Build Application') {
            steps {
                script {
                    sh '''
                    ls
                    sam build
                    '''
                }
            }
        }
        stage('Deploy to AWS') {
            steps {
                script {
                    catchError{
                            sh '''
                                sam deploy --stack-name $STACK_NAME \
                                    --region $AWS_REGION \
                                    --s3-bucket $S3_BUCKET \
                                    --parameter-overrides Stage=$STAGE \
                                    --capabilities CAPABILITY_IAM \
                                    --no-confirm-changeset
                            '''
                    }
                }
            }
        }
        stage('Etapa Rest') {
            steps {
                script {
                    def response = sh(script: 'curl -X GET https://h1898ka2e9.execute-api.us-east-1.amazonaws.com/Prod/todos', returnStdout: true).trim()
                    echo "Response: ${response}"

                    try {
                        // Parse JSON response (Groovy built-in parsing)
                        def json = new groovy.json.JsonSlurperClassic().parseText(response)

                        // Ensure response is a list
                        if (!(json instanceof List)) {
                            error "Response is not a list!"
                        }

                        // Ensure the list is not empty
                        if (json.isEmpty()) {
                            error "Response list is empty!"
                        }

                        // Validate the first item in the list
                        def item = json[0]
                        if (!(item instanceof Map)) {
                            error "First item is not a JSON object!"
                        }

                        // Required fields and their expected types
                        def requiredFields = ['checked', 'createdAt', 'text', 'id', 'updatedAt']

                        requiredFields.each { field ->
                            if (!item.containsKey(field)) {
                                error "Missing field: ${field}"
                            }
                        }

                        // Check expected values
                        if (item.text != "Learn Serverless") {
                            error "Unexpected text value: ${item.text}"
                        }

                        echo "âœ… JSON Validation Passed!"
                
                    } catch (Exception e) {
                        error "JSON Validation Failed: ${e.message}"
                    }
                }
            }
        }
    }
}